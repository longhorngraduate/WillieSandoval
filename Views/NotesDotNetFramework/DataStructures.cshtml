<div class="main-container">
    <section class="showBullets">
        <div class="container">
            <div class="row">
                <div class="col-sm-10 col-md-8">

                    <h1>@ViewData["Title"]</h1>

                    <div class="container">
                        <div class="row">

                        </div>
                        <br />

                        <div class="row">
                            <h3>Generic vs. Non-generic collections</h3>
                            <div class="container">
                                <p>
                                    Non-generic collections shouldn’t be used. When .NET was created, generic data types didn't exist, which is why the collection types in the System.Collections namespace are untyped. However, since then, generic data types were introduced and thus a new set of collections were made available in the System.Collections.Generic and System.Collections.ObjectModel namespaces.
                                </p>
                                <p>
                                    For new code, you shouldn't use non-generic collections:
                                    <ul>
                                        <li>
                                            Error prone: since non-generic collections are untyped, it requires frequent casting between object and the actual type you're expecting. Since the compiler can't check that your types are consistent, it's easier to put the wrong type in the wrong collection.
                                        </li>
                                        <li>
                                            Less performant: generic collections have the advantage that value types don't have to be boxed as object. For instance, a List&lt;int&gt; stores its data in an int[]. That's far better than storing the data in object[] as that requires boxing.
                                        </li>
                                    </ul>
                                </p>
                                <p>
                                    The following table shows how the non-generic collection types can be replaced by their generic counterparts from the System.Collections.Generic or System.Collections.ObjectModel namespaces:
                                </p>
                                <table class="table table-condensed">
                                    <thead>
                                        <tr>
                                            <th>Type</th>
                                            <th>Replacement</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>ArrayList</td>
                                            <td>List&lt;T&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>CaseInsensitiveComparer</td>
                                            <td>StringComparer.OrdinalIgnoreCase</td>
                                        </tr>
                                        <tr>
                                            <td>CaseInsensitiveHashCodeProvider</td>
                                            <td>StringComparer.OrdinalIgnoreCase</td>
                                        </tr>
                                        <tr>
                                            <td>CollectionBase</td>
                                            <td>Collection&lt;T&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>Comparer</td>
                                            <td>Comparer&lt;T&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>DictionaryBase</td>
                                            <td>Dictionary&lt;TKey, TValue&gt; or KeyedCollection&lt;TKey, TItem&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>DictionaryEntry</td>
                                            <td>KeyValuePair&lt;TKey, TValue&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>Hashtable</td>
                                            <td>Dictionary&lt;TKey, TValue&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>Queue</td>
                                            <td>Queue&lt;T&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>ReadOnlyCollectionBase</td>
                                            <td>ReadOnlyCollection&lt;T&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>SortedList</td>
                                            <td>SortedList&lt;TKey, TValue&gt;</td>
                                        </tr>
                                        <tr>
                                            <td>Stack</td>
                                            <td>Stack&lt;T&gt;</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>Array Class</h3>
                            <div class="container">
                                <pre><code class="language-csharp">
// Creates and initializes a new integer array and a new Object array.
        int[] myIntArray = new int[5] { 1, 2, 3, 4, 5 };
        Object[] myObjArray = new Object[5] { 26, 27, 28, 29, 30 };
// Copies the first two elements from the integer array to the Object array.
        System.Array.Copy(myIntArray, myObjArray, 2);
// Copies the last two elements from the Object array to the integer array.
        System.Array.Copy(myObjArray, myObjArray.GetUpperBound(0) - 1, myIntArray, myIntArray.GetUpperBound(0) - 1, 2);
// Creates and initializes a new three-dimensional Array of type Int32.
Array myArr = Array.CreateInstance(typeof(Int32), 2, 3, 4);
for (int i = myArr.GetLowerBound(0); i <= myArr.GetUpperBound(0); i++)
{
    for (int j = myArr.GetLowerBound(1); j <= myArr.GetUpperBound(1); j++)
    {
        for (int k = myArr.GetLowerBound(2); k <= myArr.GetUpperBound(2); k++)
        {
            myArr.SetValue((i * 100) + (j * 10) + k, i, j, k);
        }
    }
}
// Displays the properties of the Array.
Console.WriteLine("The Array has {0} dimension(s) and a total of {1} elements.", myArr.Rank, myArr.Length);
Console.WriteLine("\tLength\tLower\tUpper");
for (int i = 0; i < myArr.Rank; i++)
{
    Console.Write("{0}:\t{1}", i, myArr.GetLength(i));
    Console.WriteLine("\t{0}\t{1}", myArr.GetLowerBound(i), myArr.GetUpperBound(i));
}
// Displays the contents of the Array.
Console.WriteLine("The Array contains the following values:");
PrintValues(myArr);

void PrintValues(Array myArray)
{
    System.Collections.IEnumerator myEnumerator = myArray.GetEnumerator();
    int i = 0;
    int cols = myArray.GetLength(myArray.Rank - 1);
    while (myEnumerator.MoveNext())
    {
        if (i < cols)
        {
            i++;
        }
        else
        {
            Console.WriteLine();
            i = 1;
        }
        Console.Write("\t{0}", myEnumerator.Current);
    }
    Console.WriteLine();
}
// This code produces the following output.

// The Array has 3 dimension(s) and a total of 24 elements.
//     Length    Lower    Upper
// 0:  2    0    1
// 1:  3    0    2
// 2:  4    0    3
//
// The Array contains the following values:
//    0      1      2      3
//    10     11     12     13
//    20     21     22     23
//    100    101    102    103
//    110    111    112    113
//    120    121    122    123
                                </code></pre>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>ArrayList Class</h3>
                            <div class="container">
                                <p>Implements the IList interface using an array whose size is dynamically increased as required.</p>
                                <pre><code class="language-csharp">
using System;
using System.Collections;
public class SamplesArrayList  {

   public static void Main()  {

      // Creates and initializes a new ArrayList.
      ArrayList myAL = new ArrayList();
      myAL.Add("Hello");
      myAL.Add("World");
      myAL.Add("!");

      // Displays the properties and values of the ArrayList.
      Console.WriteLine( "myAL" );
      Console.WriteLine( "    Count:    {0}", myAL.Count );
      Console.WriteLine( "    Capacity: {0}", myAL.Capacity );
      Console.Write( "    Values:" );
      PrintValues( myAL );
   }

   public static void PrintValues( IEnumerable myList )  {
      foreach ( Object obj in myList )
         Console.Write( "   {0}", obj );
      Console.WriteLine();
   }
}


/*
This code produces output similar to the following:

myAL
    Count:    3
    Capacity: 4
    Values:   Hello   World   !

*/
                                </code></pre>
                                <p>
                                    We don't recommend that you use the ArrayList class for new development. Instead, we recommend that you use the generic List&lt;T&gt;
                                    class. The ArrayList class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:
                                    <ul>
                                        <li>For a heterogeneous collection of objects, use the List&lt;Object&gt; (in C#) or List(Of Object) (in Visual Basic) type.</li>
                                        <li>For a homogeneous collection of objects, use the List&lt;T&gt; class.</li>
                                    </ul>
                                </p>
                                <p>
                                    The ArrayList is not guaranteed to be sorted. You must sort the ArrayList by calling its Sort method prior to performing operations (such as BinarySearch) that require the ArrayList to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the SortedSet&lt;T&gt; class.
                                </p>
                                <p>
                                    The capacity of an ArrayList is the number of elements the ArrayList can hold. As elements are added to an ArrayList, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling TrimToSize or by setting the Capacity property explicitly.
                                </p>
                                <p>
                                    Elements in this collection can be accessed using an integer index. Indexes in this collection are zero-based.
                                </p>
                                <p>
                                    The ArrayList collection accepts null as a valid value. It also allows duplicate elements.
                                </p>
                                <p>
                                    The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.
                                    <pre><code class="language-csharp">
ArrayList myCollection = new ArrayList();

lock(myCollection.SyncRoot)
{
    foreach (object item in myCollection)
    {
        // Insert your code here.
    }
}
                                    </code></pre>
                                </p>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>Hashtable Class</h3>
                            <div class="container">
                                <p>Represents a collection of key/value pairs that are organized based on the hash code of the key.</p>
                                <pre><code class="language-csharp">
using System;
using System.Collections;

class Example
{
    public static void Main()
    {
        // Create a new hash table.
        //
        Hashtable openWith = new Hashtable();

        // Add some elements to the hash table. There are no
        // duplicate keys, but some of the values are duplicates.
        openWith.Add("txt", "notepad.exe");
        openWith.Add("bmp", "paint.exe");
        openWith.Add("dib", "paint.exe");
        openWith.Add("rtf", "wordpad.exe");

        // The Add method throws an exception if the new key is
        // already in the hash table.
        try
        {
            openWith.Add("txt", "winword.exe");
        }
        catch
        {
            Console.WriteLine("An element with Key = \"txt\" already exists.");
        }

        // The Item property is the default property, so you
        // can omit its name when accessing elements.
        Console.WriteLine("For key = \"rtf\", value = {0}.", openWith["rtf"]);

        // The default Item property can be used to change the value
        // associated with a key.
        openWith["rtf"] = "winword.exe";
        Console.WriteLine("For key = \"rtf\", value = {0}.", openWith["rtf"]);

        // If a key does not exist, setting the default Item property
        // for that key adds a new key/value pair.
        openWith["doc"] = "winword.exe";

        // ContainsKey can be used to test keys before inserting
        // them.
        if (!openWith.ContainsKey("ht"))
        {
            openWith.Add("ht", "hypertrm.exe");
            Console.WriteLine("Value added for key = \"ht\": {0}", openWith["ht"]);
        }

        // When you use foreach to enumerate hash table elements,
        // the elements are retrieved as KeyValuePair objects.
        Console.WriteLine();
        foreach( DictionaryEntry de in openWith )
        {
            Console.WriteLine("Key = {0}, Value = {1}", de.Key, de.Value);
        }

        // To get the values alone, use the Values property.
        ICollection valueColl = openWith.Values;

        // The elements of the ValueCollection are strongly typed
        // with the type that was specified for hash table values.
        Console.WriteLine();
        foreach( string s in valueColl )
        {
            Console.WriteLine("Value = {0}", s);
        }

        // To get the keys alone, use the Keys property.
        ICollection keyColl = openWith.Keys;

        // The elements of the KeyCollection are strongly typed
        // with the type that was specified for hash table keys.
        Console.WriteLine();
        foreach( string s in keyColl )
        {
            Console.WriteLine("Key = {0}", s);
        }

        // Use the Remove method to remove a key/value pair.
        Console.WriteLine("\nRemove(\"doc\")");
        openWith.Remove("doc");

        if (!openWith.ContainsKey("doc"))
        {
            Console.WriteLine("Key \"doc\" is not found.");
        }
    }
}

/* This code example produces the following output:

An element with Key = "txt" already exists.
For key = "rtf", value = wordpad.exe.
For key = "rtf", value = winword.exe.
Value added for key = "ht": hypertrm.exe

Key = dib, Value = paint.exe
Key = txt, Value = notepad.exe
Key = ht, Value = hypertrm.exe
Key = bmp, Value = paint.exe
Key = rtf, Value = winword.exe
Key = doc, Value = winword.exe

Value = paint.exe
Value = notepad.exe
Value = hypertrm.exe
Value = paint.exe
Value = winword.exe
Value = winword.exe

Key = dib
Key = txt
Key = ht
Key = bmp
Key = rtf
Key = doc

Remove("doc")
Key "doc" is not found.
 */
                                </code></pre>
                                <p>Each element is a key/value pair stored in a DictionaryEntry object. A key cannot be null, but a value can be.</p>
                                <p>We don't recommend that you use the Hashtable class for new development. Instead, we recommend that you use the generic Dictionary&lt;TKey,TValue&gt; class.</p>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>Dictionary&lt;TKey,TValue&gt; Class</h3>
                            <div class="container">
                                <p>TKey - The type of the keys in the dictionary.</p>
                                <p>TValue - The type of the values in the dictionary.</p>
                                <p>Add method throws an ArgumentException when attempting to add a duplicate key.</p>
                                <p>
                                    The example uses the Item[] property (the indexer in C#) to retrieve values, demonstrating that a KeyNotFoundException is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.
                                </p>
                                <p>
                                    The example shows how to use the TryGetValue method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and it shows how to use the ContainsKey method to test whether a key exists before calling the Add method.
                                </p>
                                <p>
                                    The example shows how to enumerate the keys and values in the dictionary and how to enumerate the keys and values alone using the Keys property and the Values property.
                                </p>
                                <p>Finally, the example demonstrates the Remove method.</p>
                                <pre><code class="language-csharp">
// Create a new dictionary of strings, with string keys.
//
Dictionary<string, string> openWith =
    new Dictionary<string, string>();

// Add some elements to the dictionary. There are no
// duplicate keys, but some of the values are duplicates.
openWith.Add("txt", "notepad.exe");
openWith.Add("bmp", "paint.exe");
openWith.Add("dib", "paint.exe");
openWith.Add("rtf", "wordpad.exe");

// The Add method throws an exception if the new key is
// already in the dictionary.
try
{
    openWith.Add("txt", "winword.exe");
}
catch (ArgumentException)
{
    Console.WriteLine("An element with Key = \"txt\" already exists.");
}

// The Item property is another name for the indexer, so you
// can omit its name when accessing elements.
Console.WriteLine("For key = \"rtf\", value = {0}.",
    openWith["rtf"]);

// The indexer can be used to change the value associated
// with a key.
openWith["rtf"] = "winword.exe";
Console.WriteLine("For key = \"rtf\", value = {0}.",
    openWith["rtf"]);

// If a key does not exist, setting the indexer for that key
// adds a new key/value pair.
openWith["doc"] = "winword.exe";

// The indexer throws an exception if the requested key is
// not in the dictionary.
try
{
    Console.WriteLine("For key = \"tif\", value = {0}.",
        openWith["tif"]);
}
catch (KeyNotFoundException)
{
    Console.WriteLine("Key = \"tif\" is not found.");
}

// When a program often has to try keys that turn out not to
// be in the dictionary, TryGetValue can be a more efficient
// way to retrieve values.
string value = "";
if (openWith.TryGetValue("tif", out value))
{
    Console.WriteLine("For key = \"tif\", value = {0}.", value);
}
else
{
    Console.WriteLine("Key = \"tif\" is not found.");
}

// ContainsKey can be used to test keys before inserting
// them.
if (!openWith.ContainsKey("ht"))
{
    openWith.Add("ht", "hypertrm.exe");
    Console.WriteLine("Value added for key = \"ht\": {0}",
        openWith["ht"]);
}

// When you use foreach to enumerate dictionary elements,
// the elements are retrieved as KeyValuePair objects.
Console.WriteLine();
foreach( KeyValuePair<string, string> kvp in openWith )
{
    Console.WriteLine("Key = {0}, Value = {1}",
        kvp.Key, kvp.Value);
}

// To get the values alone, use the Values property.
Dictionary<string, string>.ValueCollection valueColl =
    openWith.Values;

// The elements of the ValueCollection are strongly typed
// with the type that was specified for dictionary values.
Console.WriteLine();
foreach( string s in valueColl )
{
    Console.WriteLine("Value = {0}", s);
}

// To get the keys alone, use the Keys property.
Dictionary<string, string>.KeyCollection keyColl =
    openWith.Keys;

// The elements of the KeyCollection are strongly typed
// with the type that was specified for dictionary keys.
Console.WriteLine();
foreach( string s in keyColl )
{
    Console.WriteLine("Key = {0}", s);
}

// Use the Remove method to remove a key/value pair.
Console.WriteLine("\nRemove(\"doc\")");
openWith.Remove("doc");

if (!openWith.ContainsKey("doc"))
{
    Console.WriteLine("Key \"doc\" is not found.");
}

/* This code example produces the following output:

An element with Key = "txt" already exists.
For key = "rtf", value = wordpad.exe.
For key = "rtf", value = winword.exe.
Key = "tif" is not found.
Key = "tif" is not found.
Value added for key = "ht": hypertrm.exe

Key = txt, Value = notepad.exe
Key = bmp, Value = paint.exe
Key = dib, Value = paint.exe
Key = rtf, Value = winword.exe
Key = doc, Value = winword.exe
Key = ht, Value = hypertrm.exe

Value = notepad.exe
Value = paint.exe
Value = paint.exe
Value = winword.exe
Value = winword.exe
Value = hypertrm.exe

Key = txt
Key = bmp
Key = dib
Key = rtf
Key = doc
Key = ht

Remove("doc")
Key "doc" is not found.
*/
                                </code></pre>
                                <p>
                                    The Dictionary&lt;TKey,TValue&gt; generic class provides a mapping from a set of keys to a set of values. Each addition to the dictionary consists of a value and its associated key. Retrieving a value by using its key is very fast, close to O(1), because the Dictionary&lt;TKey,TValue&gt; class is implemented as a hash table.
                                </p>
                                <p>The speed of retrieval depends on the quality of the hashing algorithm of the type specified for TKey.</p>
                                <p>
                                    As long as an object is used as a key in the Dictionary&lt;TKey,TValue&gt;, it must not change in any way that affects its hash value. Every key in a Dictionary&lt;TKey,TValue&gt; must be unique according to the dictionary's equality comparer. A key cannot be null, but a value can be, if its type TValue is a reference type.
                                </p>
                                <p>
                                    Dictionary&lt;TKey,TValue&gt; requires an equality implementation to determine whether keys are equal. You can specify an implementation of the IEqualityComparer&lt;T&gt; generic interface by using a constructor that accepts a comparer parameter; if you do not specify an implementation, the default generic equality comparer EqualityComparer&lt;T&gt;.Default is used. If type TKey implements the System.IEquatable&lt;T&gt; generic interface, the default equality comparer uses that implementation.
                                </p>
                                <p>
                                    For example, you can use the case-insensitive string comparers provided by the StringComparer class to create dictionaries with case-insensitive string keys.
                                </p>
                                <p>
                                    The capacity of a Dictionary&lt;TKey,TValue&gt; is the number of elements the Dictionary&lt;TKey,TValue&gt; can hold. As elements are added to a Dictionary&lt;TKey,TValue&gt;, the capacity is automatically increased as required by reallocating the internal array.
                                </p>
                                <p>
                                    For purposes of enumeration, each item in the dictionary is treated as a KeyValuePair&lt;TKey,TValue&gt; structure representing a value and its key. The order in which the items are returned is undefined.
                                </p>
                                <p>
                                    The foreach statement of the C# language (for each in C++, For Each in Visual Basic) returns an object of the type of the elements in the collection. Since the Dictionary&lt;TKey,TValue&gt; is a collection of keys and values, the element type is not the type of the key or the type of the value. Instead, the element type is a KeyValuePair&lt;TKey,TValue&gt; of the key type and the value type. For example:
                                </p>
                                <pre><code class="language-csharp">
foreach( KeyValuePair<string, string> kvp in myDictionary )
{
    Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, kvp.Value);
}
                                </code></pre>
                                <p>The foreach statement is a wrapper around the enumerator, which allows only reading from the collection, not writing to it.</p>
                                <p>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the Equals method.</p>
                            </div>
                        </div>
                        <br />

                        @*
                        <div class="row">
                            <h3>Array Class</h3>
                            <div class="container">
                                <pre><code class="language-csharp">
                                    asdf
                                </code></pre>
                            </div>
                        </div>
                        <br />

                        *@
                    </div>
                </div>
            </div>

        </div>
    </section>
</div>