<div class="main-container">
    <section class="showBullets">
        <div class="container">
            <div class="row">
                <div class="col-sm-10 col-md-8">

                    <h1>@ViewData["Title"]</h1>

                    <div class="container">
                        <div class="row">

                        </div>
                        <br />
                        <div class="row">
                            <h3>Enable migrations on PM (not case sensitive)</h3>
                            <div class="container">
                                <ul>
                                    <li>PM> enable-migrations</li>
                                </ul>
                            </div>
                            <br />
                            <br />

                            <h3>Create your first migration</h3>
                            <div class="container">
                                <ul>
                                    <li>PM> add-migration InitialModel</li>
                                    <li>InitialModel = Give it a name related to the type of change we’ve made to the Domain model.</li>
                                    <li>Under Migrations folder, a new .cs file is created, prefixed with numbers + “_InitialModel.cs”.</li>
                                </ul>
                            </div>
                            <br />
                            <br />

                            <h3>Clear the text on the window</h3>
                            <div class="container">
                                <ul>
                                    <li>PM> cls</li>
                                </ul>
                            </div>
                            <br />
                            <br />

                            <h3>Use the “-force” switch to overwrite the migration:</h3>
                            <div class="container">
                                <ul>
                                    <li>PM> add-migration InitialModel –force</li>
                                </ul>
                            </div>
                            <br />
                            <br />

                            <h3>Run your create scripts to create the tables</h3>
                            <div class="container">
                                <ul>
                                    <li>PM> update-database</li>
                                </ul>
                            </div>
                            <br />
                            <br />

                            <h3>GitHub, create new repository</h3>
                            <div class="container">
                                <ul>
                                    <li>Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.</li>
                                    <li>Open Git Bash.</li>
                                    <li>Change the current working directory to your local project.</li>
                                    <li>
                                        Initialize the local directory as a Git repository.
                                        $ git init -b main
                                    </li>
                                    <li>
                                        Add the files in your new local repository. This stages them for the first commit.
                                        $ git add .
                                        # Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.
                                    </li>
                                    <li>
                                        Commit the files that you've staged in your local repository.
                                        $ git commit -m "First commit"
                                        # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again.
                                    </li>
                                    <li>At the top of your GitHub repository's Quick Setup page, copy the remote repository URL.</li>
                                    <li>
                                        In the Command prompt, add the URL for the remote repository where your local repository will be pushed.
                                        $ git remote add origin  <REMOTE_URL>
                                            # Sets the new remote
                                            $ git remote -v
                                            # Verifies the new remote URL
                                    </li>
                                    <li>
                                        Push the changes in your local repository to GitHub.
                                        $ git push origin main
                                        # Pushes the changes in your local repository up to the remote repository you specified as the origin
                                    </li>
                                    <li>
                                        Source: <a href="https://docs.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line">
                                            https://docs.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <br />
                            <br />

                            <h3>GitHub, Create a new branch and manage branches</h3>
                            <div class="container">
                                <ul>
                                    <li>
                                        In your Github fork, you need to keep your master branch clean, by clean I mean without any changes, like that you can create at any time a branch from your master. Each time that you want to commit a bug or a feature, you need to create a branch for it, which will be a copy of your master branch.
                                    </li>
                                    <li>When you do a pull request on a branch, you can continue to work on another branch and make another pull request on this other branch.</li>
                                    <li>Open Git Bash.</li>
                                    <li>Before creating a new branch, pull the changes from upstream. Your master needs to be up to date.</li>
                                    <li>
                                        $ git pull
                                    </li>
                                    <li>Create the branch on your local machine and switch in this branch :</li>
                                    <li>
                                        $ git checkout -b [name_of_your_new_branch]
                                    </li>
                                    <li>Push the branch on github :</li>
                                    <li>
                                        $ git push origin [name_of_your_new_branch]
                                    </li>
                                    <li>When you want to commit something in your branch, be sure to be in your branch. Add -u parameter to set-upstream.</li>
                                    <li>You can see all the branches created by using :</li>
                                    <li>
                                        $ git branch -a
                                    </li>
                                    <li>Which will show :</li>
                                    <li>
                                        * approval_messages
                                        master
                                        master_clean
                                    </li>
                                    <li>Add a new remote for your branch :</li>
                                    <li>
                                        $ git remote add [name_of_your_remote] [name_of_your_new_branch]
                                    </li>
                                    <li>Push changes from your commit into your branch :</li>
                                    <li>
                                        $ git push [name_of_your_new_remote] [url]
                                    </li>
                                    <li>Update your branch when the original branch from official repository has been updated :</li>
                                    <li>
                                        $ git fetch [name_of_your_remote]
                                    </li>
                                    <li>Then you need to apply to merge changes if your branch is derivated from develop you need to do :</li>
                                    <li>
                                        $ git merge [name_of_your_remote]/develop
                                    </li>
                                    <li>Delete a branch on your local filesystem :</li>
                                    <li>
                                        $ git branch -d [name_of_your_new_branch]
                                    </li>
                                    <li>To force the deletion of local branch on your filesystem :</li>
                                    <li>
                                        $ git branch -D [name_of_your_new_branch]
                                    </li>
                                    <li>Delete the branch on github :</li>
                                    <li>
                                        $ git push origin :[name_of_your_new_branch]
                                    </li>
                                    <li>
                                        Source: <a href="https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches">
                                            https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches
                                        </a>
                                    </li>
                                    <li>
                                        Source:  <a href="https://gist.github.com/nanusdad/7e516743e5e709073f7e">https://gist.github.com/nanusdad/7e516743e5e709073f7e</a>
                                    </li>
                                </ul>
                            </div>
                            <br />
                            <br />

                            <h3>GitHub, How to replace master branch in Git, entirely, from another branch?</h3>
                            <div class="container">
                                <p>
                                    I have two branches in my Git repository:

                                    master
                                    seotweaks (created originally from master)
                                    I created seotweaks with the intention of quickly merging it back into master. However, that was three months ago and the code in this branch is 13 versions ahead of master.

                                    It has effectively become our working master branch as all the code in master is more or less obsolete now.

                                    Very bad practice I know, lesson learned.

                                    Do you know how I can replace all of the contents of the master branch with those in seotweaks?

                                    I could just delete everything in master and merge, but this does not feel like best practice.
                                </p>
                                <p>
                                    You should be able to use the "ours" merge strategy to overwrite master with seotweaks like this:
                                </p>
                                <ul>
                                    <li>$ git checkout seotweaks</li>
                                    <li>$ git merge -s ours master</li>
                                    <li>$ git checkout master</li>
                                    <li>$ git merge seotweaks</li>
                                    <li>The result should be your master is now essentially seotweaks.</li>
                                </ul>
                                <p>
                                    (-s ours is short for --strategy=ours)
                                    <br />
                                    From the docs about the 'ours' strategy:
                                    <br />
                                    This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old development history of side branches. Note that this is different from the -Xours option to the recursive merge strategy.
                                    <br />
                                    Update from comments: If you get fatal: refusing to merge unrelated histories, then change the second line to this: git merge --allow-unrelated-histories -s ours master
                                </p>
                                <p>
                                    Source:
                                    <a href="https://stackoverflow.com/questions/2862590/how-to-replace-master-branch-in-git-entirely-from-another-branch">https://stackoverflow.com/questions/2862590/how-to-replace-master-branch-in-git-entirely-from-another-branch</a>
                                </p>
                            </div>
                            <br />
                            <br />

                            <h3>Visual Studio, How to Find and Replace with regular expressions</h3>
                            <div class="container">
                                <p>Place this on the Search field:</p>
                                <ul>
                                    <li>some stuff you want to match(.*)some other stuff you want to match</li>
                                </ul>
                                <p>Place this on the Replace field:</p>
                                <ul>
                                    <li>some stuff you want to match$1your new stuff</li>
                                </ul>
                                <p>
                                    Helpful Source:
                                    <a href="https://www.jetbrains.com/help/rider/Tutorial_Finding_and_Replacing_Text_Using_Regular_Expressions.html#upper_lower_case_switch">
                                        https://www.jetbrains.com/help/rider/Tutorial_Finding_and_Replacing_Text_Using_Regular_Expressions.html#upper_lower_case_switch
                                    </a>
                                </p>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

        </div>
    </section>
</div>