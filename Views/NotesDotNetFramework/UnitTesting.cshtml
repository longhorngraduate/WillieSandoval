@{
    Layout = "~/Views/Shared/_LayoutNoTemplate.cshtml";
}

<h1>@ViewData["Title"]</h1>

<div class="container">
    <div class="row">

    </div>
    <br />
    <div class="row">
        <h3>3 types of tests</h3>
        <div class="container">
            <h4>Unit</h4>
            <ul>
                <li>Test a unit of an application without its external dependencies, such as files, DBs, message queues, web services, etc.</li>
                <li>Used to test the logic, conditional statements, loops, and functions with complex logic.</li>
            </ul>

            <h4>Integration</h4>
            <ul>
                <li>Tests with its external dependencies</li>
                <li>Take longer to execute</li>
                <li>Gives you more confidence</li>
            </ul>

            <h4>End-to-End</h4>
            <ul>
                <li>Drives an application through its UI</li>
            </ul>
        </div>
        <br />
        <br />

        <h3>Testing Frameworks</h3>
        <div class="container">
            They give you a utility library to write your tests and a test runner which runs your tests and gives you a report of passing and failing tests.
            <ul>
                <li>NUnit</li>
                <li>MSTest</li>
                <li>xUnit</li>
            </ul>

            <h4>How To</h4>
            <ul>
                <li>Add New Project</li>
                <li>Go to Test and create Unit Test Project (.NET Framework… etc), which is found by default with the latest MS VS editions.</li>
                <li>By convention, call this new test project "<name of main project>.UnitTests".</li>
                <li>[TestClass] and [TestMethod] attributes are created on the class.</li>
                <li>By convention, call the class "<class being tested>Tests".</li>
                <li>
                    By convention, call the methods by following this rule:  1st, the method being tested, 2nd, the scenario we’re testing, 3rd, the expected behavior.
                    <ul>
                        <li>Ex, public void CanBeCancelledBy_AdminCancelling_ReturnsTrue()</li>
                    </ul>
                </li>
                <li>
                    Follow the Triple A (AAA) convention, which are:
                    <ul>
                        <li>
                            Arrange
                            <ul>
                                <li>Create an instance of the main class.</li>
                                <li>var Reservation = new Reservation();</li>
                            </ul>
                        </li>
                        <li>
                            Act
                            <ul>
                                <li>Act on the object, so call the method we’re going to test.</li>
                                <li>var result = reservation.CanBeCancelledBy(new User { IsAdmin = true });</li>
                            </ul>
                        </li>
                        <li>
                            Assert
                            <ul>
                                <li>Assert.IsTrue(result);</li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li>Go to Test, Run, All Tests (Ctrl + R, A)</li>
                <li>Go to Test, Windows, Test Explorer (Ctrl E, T)</li>
            </ul>

            <h4>If you want Nunit instead of MS Tests</h4>
            <ul>
                <li>Install NUnit and NUnit3TestAdapter</li>
                <li>Use attributes [TestFixture] for the class and [Test] for the method.</li>
                <li>Remove the Using statement for MS tests to remove the reference.</li>
            </ul>
        </div>

    </div>
</div>