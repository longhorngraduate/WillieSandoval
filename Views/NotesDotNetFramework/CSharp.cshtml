<div class="main-container">
    <section class="showBullets">
        <div class="container">
            <div class="row">
                <div class="col-sm-10 col-md-8">

                    <h1>@ViewData["Title"]</h1>

                    <div class="container">
                        <div class="row">

                        </div>
                        <br />

                        <div class="row">
                            <h3>Monolithic</h3>
                            <div class="container">
                                <p>
                                    Source: <a href="https://www.quora.com/What-is-the-difference-modular-vs-monolithic-programming-for-applications">
                                        https://www.quora.com/What-is-the-difference-modular-vs-monolithic-programming-for-applications
                                    </a>
                                </p>
                                <p>
                                    A monolithic application describes a single-tiered software application in which the user interface and data access code are combined into a single program from a single platform. A monolithic application is self-contained and independent from other computing applications.
                                </p>
                                <p>
                                    The difference between <b>modular</b> and <b>monolithic</b> design is more about the organization of the project, and not so much about how the program actually behaves.
                                </p>
                                <p>
                                    Modular organization (of a non-trivial software project) can make the code more readable, maintainable, portable, and reliable. In addition, carving up a design into separate modules makes it much easier for individuals on a team to work independently on separate parts of the implementation, without getting in each other's way.
                                </p>
                                <p>
                                    Improved readability is achieved by presenting the reader with smaller, well-defined chunks of code to comprehend, rather than one large monolithic chunk of code that may require lots of scrolling or page-turning to understand. Improved maintainability is achieved by allowing bugs to be fixed or features to be added by working on just one module or a small number of modules, instead of touching all the code. If errors are made during maintenance, they are limited to the specific module(s) changed, so the issue is usually easier to track down. Portability can be improved by carving off a hardware-dependent (or OS-dependent or compiler-dependent) section into a separate module, so that when it comes time to port the program, changes can be limited to that module alone. And because modular code is more readable and maintainable, it can end up being more reliable, since the process of modifying (to fix bugs or add features) the code may be less error-prone. Modular design also typically makes it easier to create and perform unit tests, which can lead to improved reliability and can cut down on the time/cost of integration testing.
                                </p>
                                <p>
                                    Modular code thrives on using well-defined interfaces between modules, so that changing the internal implementation of one module has no effect on other modules. In contrast, monolithic code is sometimes considered "brittle," because it may rely on global variables and/or ill-defined interfaces, where a small change in one area can lead to unintended consequences elsewhere in the code.
                                </p>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>Delegates (C# Programming Guide)</h3>
                            <div class="container">
                                <p>
                                    A delegate is a type that represents references to methods with a particular parameter list and return type. When you instantiate a delegate, you can associate its instance with any method with a compatible signature and return type. You can invoke (or call) the method through the delegate instance.
                                </p>
                                <p>
                                    Delegates are used to pass methods as arguments to other methods. Event handlers are nothing more than methods that are invoked through delegates. You create a custom method, and a class such as a windows control can call your method when a certain event occurs. The following example shows a delegate declaration:
                                    public delegate int PerformCalculation(int x, int y);
                                </p>
                                <p>
                                    Any method from any accessible class or struct that matches the delegate type can be assigned to the delegate. The method can be either static or an instance method. This flexibility means you can programmatically change method calls, or plug new code into existing classes.
                                </p>
                                <p>
                                    Note:
                                    In the context of method overloading, the signature of a method does not include the return value. But in the context of delegates, the signature does include the return value. In other words, a method must have the same return type as the delegate.
                                </p>
                                <pre><code class="language-csharp">
Ex:
public delegate void Del(string message);

// Create a method for a delegate.
public static void DelegateMethod(string message)
{
    Console.WriteLine(message);
}

// Instantiate the delegate.
Del handler = DelegateMethod;

// Call the delegate.
handler("Hello World");

public static void MethodWithCallback(int param1, int param2, Del callback)
{
    callback("The number is: " + (param1 + param2).ToString());
}

MethodWithCallback(1, 2, handler);
//The number is: 3

public class MethodClass
{
    public void Method1(string message) { }
    public void Method2(string message) { }
}

var obj = new MethodClass();
Del d1 = obj.Method1;
Del d2 = obj.Method2;
Del d3 = DelegateMethod;

//Both types of assignment are valid.
Del allMethodsDelegate = d1 + d2;
allMethodsDelegate += d3;

//remove Method1
allMethodsDelegate -= d1;

// copy AllMethodsDelegate while removing d2
Del oneMethodDelegate = allMethodsDelegate – d2;

int invocationCount = d1.GetInvocationList().GetLength(0);
                                </code></pre>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>Covariance and Contravariance</h3>
                            <div class="container">
                                <p>
                                    Covariance and contravariance are terms that refer to the ability to use a more derived type (more specific) or a less derived type (less specific) than originally specified. Generic type parameters support covariance and contravariance to provide greater flexibility in assigning and using generic types.
                                </p>
                                <p>
                                    When you're referring to a type system, covariance, contravariance, and invariance have the following definitions. The examples assume a base class named Base and a derived class named Derived.
                                    <ul>
                                        <li>
                                            <h4>Covariance</h4>
                                            <ul>
                                                <li>Enables you to use a more derived type than originally specified.</li>
                                                <li>You can assign an instance of IEnumerable&lt;Derived&gt; to a variable of type IEnumerable&lt;Base&gt;.</li>
                                                <li>
                                                    Ex:
                                                    <pre><code class="language-csharp">
IEnumerable&lt;Derived&gt; d = new List&lt;Derived&gt;();
IEnumerable&lt;Base&gt; b = d;
                                                    </code></pre>
                                                </li>
                                            </ul>
                                        </li>
                                        <li>
                                            <h4>Contravariance</h4>
                                            <ul>
                                                <li>Enables you to use a more generic (less derived) type than originally specified.</li>
                                                <li>You can assign an instance of Action&lt;Base&gt; to a variable of type Action&lt;Derived&gt;.</li>
                                                <li>
                                                    Ex:
                                                    <pre><code class="language-csharp">
Action&lt;Base&gt; b = (target) => { Console.WriteLine(target.GetType().Name); };
Action&lt;Derived&gt; d = b;
d(new Derived());
                                                    </code></pre>
                                                </li>
                                            </ul>
                                        </li>
                                        <li>
                                            <h4>Invariance</h4>
                                            <ul>
                                                <li>Means that you can use only the type originally specified. An invariant generic type parameter is neither covariant nor contravariant.</li>
                                                <li>You cannot assign an instance of List&lt;Base&gt; to a variable of type List&lt;Derived&gt; or vice versa.</li>
                                            </ul>
                                        </li>
                                    </ul>
                                </p>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>In Memory Collections</h3>
                            <div class="container">
                                <p>An in-memory collection is just that: a collection of objects that is kept in memory, rather than being accessed via a hard disk file, or a DB server, or similar.</p>
                                <p>All of the standard C# collections are in-memory: List<T>, Queue<T>, Stack<T>, DataTable, DataSet, even ArrayList and arrays are all in-memory collections. DataReader isn't: it's held at the Server and fetched row-by-row (buffering excepted).</p>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>Enumerable</h3>
                            <div class="container">
                                <p>The Enumerable and Queryable are two static classes that contain extension methods to write LINQ queries.</p>
                                <p>
                                    The Enumerable class includes extension methods for the classes that implement IEnumerable&lt;T&gt; interface, for example all the built-in collection classes implement IEnumerable&lt;T&gt; interface and so we can write LINQ queries to retrieve data from the built-in collections.
                                </p>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>Queryable</h3>
                            <div class="container">
                                <p>The Enumerable and Queryable are two static classes that contain extension methods to write LINQ queries.</p>
                                <p>Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</p>
                                <p>public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable</p>
                                <p>IQueryable is derived from IEnumerable, so IQ supports everything IE does, plus it adds features of it's own.</p>
                                <p>
                                    The Queryable class includes extension methods for classes that implement IQueryable&lt;t&gt; interface. The IQueryable&lt;T&gt; interface is used to provide querying capabilities against a specific data source where the type of the data is known. For example, Entity Framework API implements IQueryable&lt;T&gt; interface to support LINQ queries with underlaying databases such as MS SQL Server.
                                </p>
                                <p>
                                    Also, there are APIs available to access third party data; for example, LINQ to Amazon provides the ability to use LINQ with Amazon web services to search for books and other items. This can be achieved by implementing the IQueryable interface for Amazon.
                                </p>
                                <p>
                                    From StackOverflow:<br />
                                    Any IEnumerable can be converted into an IQueryable by using the AsQueryable() extension method. This creates a superficially-similar, but functionally very different construct behind the scenes as when using LINQ methods against a plain IEnumerable object. This is probably the most plentiful source of queryables you have access to without setting up an actual IQueryable provider. This changeover is very useful for unit-testing LINQ-based algorithms as you don't need the actual data store, just a list of in-memory data that can imitate it.
                                </p>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>Extension Methods</h3>
                            <div class="container">
                                <p>
                                    Extension methods enable you to "add" methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. Extension methods are static methods, but they're called as if they were instance methods on the extended type.
                                </p>
                                <p>
                                    The most common extension methods are the LINQ standard query operators that add query functionality to the existing System.Collections.IEnumerable and System.Collections.Generic.IEnumerable&lt;T&gt; types. To use the standard query operators, first bring them into scope with a using System.Linq directive. Then any type that implements IEnumerable&lt;T&gt; appears to have instance methods such as GroupBy, OrderBy, Average, and so on. You can see these additional methods in IntelliSense statement completion when you type "dot" after an instance of an IEnumerable&lt;T&gt; type such as List&lt;T&gt; or Array.
                                </p>
                                <h4>Example</h4>
                                <p>
                                    The following example demonstrates the rules that the C# compiler follows in determining whether to bind a method call to an instance method on the type, or to an extension method. The static class Extensions contains extension methods defined for any type that implements IMyInterface. Classes A, B, and C all implement the interface.
                                </p>
                                <p>The MethodB extension method is never called because its name and signature exactly match methods already implemented by the classes.</p>
                                <p>When the compiler can't find an instance method with a matching signature, it will bind to a matching extension method if one exists.</p>
                                <pre><code class="language-csharp">
// Define an interface named IMyInterface.
namespace DefineIMyInterface
{
using System;

public interface IMyInterface
{
// Any class that implements IMyInterface must define a method
// that matches the following signature.
void MethodB();
}
}

// Define extension methods for IMyInterface.
namespace Extensions
{
using System;
using DefineIMyInterface;

// The following extension methods can be accessed by instances of any
// class that implements IMyInterface.
public static class Extension
{
public static void MethodA(this IMyInterface myInterface, int i)
{
Console.WriteLine
("Extension.MethodA(this IMyInterface myInterface, int i)");
}

public static void MethodA(this IMyInterface myInterface, string s)
{
Console.WriteLine
("Extension.MethodA(this IMyInterface myInterface, string s)");
}

// This method is never called in ExtensionMethodsDemo1, because each
// of the three classes A, B, and C implements a method named MethodB
// that has a matching signature.
public static void MethodB(this IMyInterface myInterface)
{
Console.WriteLine
("Extension.MethodB(this IMyInterface myInterface)");
}
}
}

// Define three classes that implement IMyInterface, and then use them to test
// the extension methods.
namespace ExtensionMethodsDemo1
{
using System;
using Extensions;
using DefineIMyInterface;

class A : IMyInterface
{
public void MethodB() { Console.WriteLine("A.MethodB()"); }
}

class B : IMyInterface
{
public void MethodB() { Console.WriteLine("B.MethodB()"); }
public void MethodA(int i) { Console.WriteLine("B.MethodA(int i)"); }
}

class C : IMyInterface
{
public void MethodB() { Console.WriteLine("C.MethodB()"); }
public void MethodA(object obj)
{
Console.WriteLine("C.MethodA(object obj)");
}
}

class ExtMethodDemo
{
static void Main(string[] args)
{
// Declare an instance of class A, class B, and class C.
A a = new A();
B b = new B();
C c = new C();

// For a, b, and c, call the following methods:
//      -- MethodA with an int argument
//      -- MethodA with a string argument
//      -- MethodB with no argument.

// A contains no MethodA, so each call to MethodA resolves to
// the extension method that has a matching signature.
a.MethodA(1);           // Extension.MethodA(IMyInterface, int)
a.MethodA("hello");     // Extension.MethodA(IMyInterface, string)

// A has a method that matches the signature of the following call
// to MethodB.
a.MethodB();            // A.MethodB()

// B has methods that match the signatures of the following
// method calls.
b.MethodA(1);           // B.MethodA(int)
b.MethodB();            // B.MethodB()

// B has no matching method for the following call, but
// class Extension does.
b.MethodA("hello");     // Extension.MethodA(IMyInterface, string)

// C contains an instance method that matches each of the following
// method calls.
c.MethodA(1);           // C.MethodA(object)
c.MethodA("hello");     // C.MethodA(object)
c.MethodB();            // C.MethodB()
}
}
}
/* Output:
Extension.MethodA(this IMyInterface myInterface, int i)
Extension.MethodA(this IMyInterface myInterface, string s)
A.MethodB()
B.MethodA(int i)
B.MethodB()
Extension.MethodA(this IMyInterface myInterface, string s)
C.MethodA(object obj)
C.MethodA(object obj)
C.MethodB()
*/
                                </code></pre>
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <h3>LINQ</h3>
                            <div class="container">
                                <p>
                                    Language-Integrated Query (LINQ) is a powerful query language introduced with .Net 3.5 & Visual Studio 2008. LINQ can be used with C# or Visual Basic to query different data sources.
                                </p>
                                <p>
                                    LINQ is a structured query syntax built in C# and VB.NET to retrieve data from different types of data sources such as collections, ADO.Net DataSet, XML Docs, web service, and MS SQL Server and other databases.
                                </p>
                                <p>
                                    <h4>Example: LINQ Query to Array</h4>
                                    <pre><code class="language-csharp">
// Data source
string[] names = {"Bill", "Steve", "James", "Mohan" };

// LINQ Query
var myLinqQuery = from name in names
    where name.Contains('a')
    select name;

// Query execution
foreach(var name in myLinqQuery)
    Console.Write(name + " ");
                                    </code></pre>
                                </p>
                            </div>
                        </div>
                        <br />

                        


                        @*
        <div class="row">
            <h3>Create your first migration</h3>
            <div class="container">
                <ul>
                    <li>PM> add-migration InitialModel</li>
                    <li>InitialModel = Give it a name related to the type of change we’ve made to the Domain model.</li>
                    <li>Under Migrations folder, a new .cs file is created, prefixed with numbers + “_InitialModel.cs”.</li>
                </ul>
            </div>
        </div>
        <br />

        <div class="row">
            <h3>Create your first migration</h3>
            <div class="container">
                <ul>
                    <li>PM> add-migration InitialModel</li>
                    <li>InitialModel = Give it a name related to the type of change we’ve made to the Domain model.</li>
                    <li>Under Migrations folder, a new .cs file is created, prefixed with numbers + “_InitialModel.cs”.</li>
                </ul>
            </div>
        </div>
        <br />

        <div class="row">
            <h3>Create your first migration</h3>
            <div class="container">
                <ul>
                    <li>PM> add-migration InitialModel</li>
                    <li>InitialModel = Give it a name related to the type of change we’ve made to the Domain model.</li>
                    <li>Under Migrations folder, a new .cs file is created, prefixed with numbers + “_InitialModel.cs”.</li>
                </ul>
            </div>
        </div>
        <br />

        <div class="row">
            <h3>Create your first migration</h3>
            <div class="container">
                <ul>
                    <li>PM> add-migration InitialModel</li>
                    <li>InitialModel = Give it a name related to the type of change we’ve made to the Domain model.</li>
                    <li>Under Migrations folder, a new .cs file is created, prefixed with numbers + “_InitialModel.cs”.</li>
                </ul>
            </div>
        </div>
        <br />*@

                    </div>
                </div>
            </div>

        </div>
    </section>
</div>